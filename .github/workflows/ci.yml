name: Build and Deploy

on:
  push:
    branches: [ main ]
    tags: [ '*' ]
    paths-ignore:
      - '*.md'
  pull_request:
    paths-ignore:
      - '*.md'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: ${{ secrets.GCP_SERVICE_NAME }}
  REGION: ${{ secrets.GCP_REGION }}
  REGISTRY_HOST: ${{ secrets.GCP_REGISTRY_HOST }}

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          playwright install firefox

      - name: Test and submit coverage report
        run: ./runtest.sh coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run code linter
        run: pylint --exit-zero app/*

  build-and-deploy:
    needs: test-and-lint
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Authorize Docker push
        run: gcloud auth configure-docker ${{ env.REGISTRY_HOST }}

      - name: Build and push Docker image
        env:
          GIT_BRANCH: ${{ github.ref_name }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          docker build \
            --build-arg CI=github \
            --build-arg GITHUB_SHA=$GITHUB_SHA \
            --build-arg GIT_BRANCH=$GIT_BRANCH \
            -t ${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            -t ${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest .
          docker push ${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest

      - name: Deploy to Cloud Run
        if: github.ref == 'refs/heads/main'
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated

      - name: Clean up old images
        if: github.ref == 'refs/heads/main'
        run: |
          gcloud artifacts docker images delete \
            ${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }} \
            --quiet \
            --limit-numeric=5 \
            --order-by=~CREATE_TIME
